#!/bin/sh
# See the LICENSE file for copyright and license details.
# shellcheck disable=1090

FUNCPATH="./func"
VERSION="git"

pidfile="/tmp/sb-$USER.pid"

out() { printf '%s\n' "$@" >&2 ;}

usage() {
    out "${0##*/} [-dnvx]" "" \
        " Options:" \
        " -d        Use the default configuration" \
        " -n        Print to stdout instead of the bar" \
        " -v        Print version number and exit" \
        " -x        Kill existing sb instance" "" \
        "${0##*/}-$VERSION" \
        "2019-2020 (c) Cem Keylan"
    exit 1
}

cleanup() { rm -f "$pidfile" ; exit 0;}

while [ "$1" ] ; do
    case "$1" in
        -d) noconfig=1 ; shift ;;
        -v) printf '%s\n' "${0##*/}-$VERSION"; exit 0 ;;
        -n) nobar=1 ; shift ;;
        -x) [ -e "/tmp/sb-$USER.pid" ] || {
                out "There is no running instance of sb"
                exit 1
            }
            read -r pid < "$pidfile"
            kill "$pid"
            rm "$pidfile"
            exit 0
            ;;
        *) usage ;;
    esac
done


[ "$noconfig" != 1 ] && [ -e "${XDG_CONFIG_HOME:=$HOME/.config}/sbrc" ] && . "$XDG_CONFIG_HOME/sbrc"

# Load Functions
for func in "$FUNCPATH/"* ; do [ -f "$func" ] && . "$func"; done
for func in "${XDG_CONFIG_HOME:=$HOME/.config}/sb-func/"* ; do [ -f "$func" ] && . "$func" ; done

# Unless running from the command line, check for
# an existing instance
[ "$nobar" ] || {
    [ -e "/tmp/sb-$USER.pid" ] && {
        [ "$KILLEXISTING" != 1 ] && {
            out "Error: sb is already running." \
                "If you think that this is not true, run 'sb -x'."
            exit 1
        }
        read -r pid < "/tmp/sb-$USER.pid"
	kill "$pid" 2>/dev/null
    }
    printf '%s\n' "$$" > "/tmp/sb-$USER.pid"
}

: "${DELIMITER:=|}"

# If the bar command is not defined, set a default bar.
command -v bar >/dev/null 2>&1 ||
    bar() { storage ; ram ; gethostname ; datetime ;}

trap cleanup EXIT INT QUIT HUP

if [ "$nobar" = 1 ]; then
    while :; do
        # If stdout belongs to sb, clear the screen each time the bar is being
        # printed. If stdout doesn't belong to us, that means sb is being piped
        # and we are most likely not dealing with a terminal. In such a case we
        # should not clear the screen.
        [ -t 1 ] && clear
        printf ' %s\n' "$(bar)"
        sleep "${SLEEPTIME:=1}"
    done
else
    while :; do xsetroot -name " $(bar)"; sleep "${SLEEPTIME:=1}"; done
fi
